# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication, QAction, QFileDialog
import sys
from functions import *
from automate import automate
from helpwindow import Ui_Dialog
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(90, 40, 641, 71))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(90, 150, 641, 301))
        self.textBrowser.setObjectName("textBrowser")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(330, 480, 131, 41))
        self.pushButton.setObjectName("pushButton")
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 24))
        self.menubar.setObjectName("menubar")
        self.menuMain = QtWidgets.QMenu(self.menubar)
        self.menuMain.setObjectName("menuMain")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionSave.triggered.connect(self.saveFile)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionOpen.triggered.connect(self.openfile)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionNew.triggered.connect(self.removeText)
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionExit.triggered.connect(self.exitbutton)
        self.actionhelp = QtWidgets.QAction(MainWindow)
        self.actionhelp.setObjectName("actionhelp")
        self.actionhelp.triggered.connect(self.helpbutton)
        self.menuMain.addAction(self.actionSave)
        self.menuMain.addAction(self.actionOpen)
        self.menuMain.addAction(self.actionNew)
        self.menuMain.addAction(self.actionExit)
        self.menuHelp.addAction(self.actionhelp)
        self.menubar.addAction(self.menuMain.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.pushButton.clicked.connect(self.open_window)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Analyse"))
        self.menuMain.setTitle(_translate("MainWindow", "Main"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionOpen.setText(_translate("MainWindow", "Open "))
        self.actionNew.setText(_translate("MainWindow", "Remove"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionhelp.setText(_translate("MainWindow", "Help"))
        

    def open_window(self):
        self.textBrowser.clear()
        text = self.plainTextEdit.toPlainText()
        text = remove_extra_spaces(text)
        nocmnt = remove_comments(text)
        seperated_text = sep_hashtage(nocmnt)
        result = automate_final(seperated_text)
        returned_final_string = list_to_string(result)
        self.textBrowser.setPlainText(seperated_text +'\n'+returned_final_string)
        
        
        

    def saveFile(self):
        options = QFileDialog.Options()
        file_dialog = QFileDialog()
        file_dialog.setAcceptMode(QFileDialog.AcceptSave)
        file_path, _ = file_dialog.getSaveFileName(None, "Save File", "", "Text Files (*.txt);;All Files (*)", options=options)
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as file:
                    file.write(self.plainTextEdit.toPlainText())
            except Exception as e:
                print(f"Error saving the file: {str(e)}")

    
    def openfile(self):
        options = QFileDialog.Options()
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(None, "Open File", "", "Text Files (*.txt);;All Files (*)", options=options)
        
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    content = file.read()
                self.plainTextEdit.appendPlainText(content)
                content_new = remove_extra_spaces(content)
                content_new = remove_extra_Backspaces(content)
                modified = content_new.replace(" ", " ").replace("\n"," ")
                self.textBrowser.setPlainText(modified) 
            except Exception as e:
                print(f"Error opening the file: {str(e)}")

    def removeText(self):
        self.textBrowser.clear()
        self.plainTextEdit.clear()

    def exitbutton(self):
        sys.exit()
           
    def helpbutton(self):
        help_dialog = QtWidgets.QDialog()
        help_window = Ui_Dialog()
        help_window.setupUi(help_dialog)

        # Show the help window
        help_dialog.exec_() 


def main():
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()